name: Network Access Issue Handler

on:
  issues:
    types: 
      - opened
      - edited

jobs:
  process_access_request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Convert line endings and make scripts executable
        run: |
          # Make scripts executable
          chmod +x ./scripts/form_to_yaml.py ./scripts/validate_schema.py

      - name: Install dependencies
        run: |
          pip install --quiet yamllint PyYAML jsonschema

      - name: Process Issue Form
        id: issue_data
        run: |
          # Run the script to process the form data
          set -x  # Enable verbose output
          python3 ./scripts/form_to_yaml.py || {
            echo "Script failed. Checking debug log..."
            cat /tmp/form_to_yaml_debug.log
            exit 1
          }
          
          # Extract and set outputs
          REQUEST_TYPE=$(grep "request_type=" /tmp/form_to_yaml_debug.log | cut -d= -f2)
          echo "request_type=$REQUEST_TYPE" >> $GITHUB_OUTPUT
          
          # Extract region from the generated YAML
          REGION=$(grep -o 'region: [a-z0-9-]*' /tmp/issue.yaml | head -1 | cut -d ' ' -f 2)
          echo "region=$REGION" >> $GITHUB_OUTPUT
          
          # Set schema file
          if [ "$REQUEST_TYPE" = "consumer" ]; then
            echo "schema_file=privatelink-consumer-schema.json" >> $GITHUB_OUTPUT
          elif [ "$REQUEST_TYPE" = "provider" ]; then
            echo "schema_file=privatelink-provider-schema.json" >> $GITHUB_OUTPUT
          fi
          
          # Set other outputs
          ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          ISSUE_AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")
          ISSUE_TITLE=$(jq -r '.issue.title' "$GITHUB_EVENT_PATH")
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_author=$ISSUE_AUTHOR" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          # Display generated YAML for debugging
          echo "Generated YAML content:"
          cat /tmp/issue.yaml
          
          # Display debug log
          echo "Debug Log:"
          cat /tmp/form_to_yaml_debug.log

      - name: YAML Validation
        id: yaml_validation
        run: |
          yamllint --format standard -c .yamllint /tmp/issue.yaml > /tmp/yamllint_output.txt || true
          
          if [ -s /tmp/yamllint_output.txt ]; then
            echo "yamllint_error=true" >> $GITHUB_OUTPUT
            cat /tmp/yamllint_output.txt
          else
            echo "yamllint_error=false" >> $GITHUB_OUTPUT
            echo "YAML format validation passed"
          fi

      - name: Schema Validation
        id: schema_validation
        run: |
          if [ "${{ steps.issue_data.outputs.request_type }}" != "unknown" ]; then
            ./scripts/validate_schema.py /tmp/issue.yaml "${{ steps.issue_data.outputs.schema_file }}" > /tmp/schema_output.txt 2>&1 || echo "schema_error=true" >> $GITHUB_OUTPUT
            
            if [ -s /tmp/schema_output.txt ]; then
              cat /tmp/schema_output.txt
              if grep -q "‚ùå" /tmp/schema_output.txt; then
                echo "schema_error=true" >> $GITHUB_OUTPUT
              else
                echo "schema_error=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "schema_error=false" >> $GITHUB_OUTPUT
              echo "Schema validation passed"
            fi
          else
            # Try both schemas
            CONSUMER_RESULT=$(./scripts/validate_schema.py /tmp/issue.yaml privatelink-consumer-schema.json 2>&1 || echo "Failed")
            PROVIDER_RESULT=$(./scripts/validate_schema.py /tmp/issue.yaml privatelink-provider-schema.json 2>&1 || echo "Failed")
            
            if echo "$CONSUMER_RESULT" | grep -q "‚úÖ"; then
              echo "schema_file=privatelink-consumer-schema.json" >> $GITHUB_OUTPUT
              echo "schema_error=false" >> $GITHUB_OUTPUT
              echo "Schema validation passed (consumer schema)"
            elif echo "$PROVIDER_RESULT" | grep -q "‚úÖ"; then
              echo "schema_file=privatelink-provider-schema.json" >> $GITHUB_OUTPUT
              echo "schema_error=false" >> $GITHUB_OUTPUT
              echo "Schema validation passed (provider schema)"
            else
              echo "schema_error=true" >> $GITHUB_OUTPUT
              echo "Failed to validate against any schema:"
              echo "$CONSUMER_RESULT"
              echo "$PROVIDER_RESULT"
            fi
          fi

      - name: Create validation comment
        if: steps.yaml_validation.outputs.yamllint_error == 'true' || steps.schema_validation.outputs.schema_error == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          {
            echo "### ‚ö†Ô∏è Validation Results"
            echo ""
            
            if [ "${{ steps.yaml_validation.outputs.yamllint_error }}" == "true" ]; then
              echo "#### YAML Formatting Issues:"
              echo '```yaml'
              cat /tmp/yamllint_output.txt
              echo '```'
              echo ""
            else
              echo "#### ‚úÖ YAML Format Validation: Passed"
              echo ""
            fi
            
            if [ "${{ steps.schema_validation.outputs.schema_error }}" == "true" ]; then
              echo "#### Schema Validation Issues:"
              echo '```'
              cat /tmp/schema_output.txt
              echo '```'
            else
              echo "#### ‚úÖ Schema Validation: Passed"
            fi
          } > /tmp/validation_comment.txt
          
          gh issue comment "${{ steps.issue_data.outputs.issue_number }}" --body-file /tmp/validation_comment.txt
          
          if [ "${{ steps.yaml_validation.outputs.yamllint_error }}" == "true" ] || [ "${{ steps.schema_validation.outputs.schema_error }}" == "true" ]; then
            echo "Validation errors found. Exiting workflow."
            exit 1
          fi

      - name: Prepare Policy File
        id: policy_file
        run: |
          # Ensure policies directory exists
          mkdir -p infrastructure/policies
          
          # Generate policy filename
          REGION="${{ steps.issue_data.outputs.region }}"
          THIRD_PARTY_NAME=$(grep 'thirdpartyName:' /tmp/issue.yaml | awk '{print $2}' | tr '[:upper:]' '[:lower:]' | tr -d '\n')
          THIRD_PARTY_ID=$(grep 'thirdPartyID:' /tmp/issue.yaml | awk '{print $2}' | tr -d '\n')
          
          # Fallback to safe naming if extraction fails
          if [ -z "$THIRD_PARTY_NAME" ] || [ -z "$THIRD_PARTY_ID" ]; then
            THIRD_PARTY_NAME="unknown"
            THIRD_PARTY_ID="policy"
          fi
          
          FILENAME="${THIRD_PARTY_NAME}-${THIRD_PARTY_ID}-${REGION}-policy.yaml"
          FILE="infrastructure/policies/${FILENAME}"
          
          # Copy YAML to policies directory
          cp /tmp/issue.yaml "$FILE"
          
          # Output the filename for subsequent steps
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "filename=$FILENAME" >> "$GITHUB_OUTPUT"

      - name: Commit Changes and Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          ISSUE_ID=${{ github.event.issue.number }}
          BRANCH="issue-${ISSUE_ID}"
          FILE="${{ steps.policy_file.outputs.file }}"
          FILENAME="${{ steps.policy_file.outputs.filename }}"
          LABEL=$(jq -r '.issue.labels[0].name' "$GITHUB_EVENT_PATH")
          AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Check if branch already exists
          if git ls-remote --heads origin | grep -q "refs/heads/$BRANCH"; then
            # Branch exists, create a unique branch name
            BRANCH="issue-${ISSUE_ID}-$(date +%s)"
          fi

          # Create and switch to the branch
          git checkout -b "$BRANCH"
          git add "$FILE"
          git commit -m "Append request from issue #${ISSUE_ID}"
          
          # Force push or push with lease to handle potential conflicts
          git push -f origin "$BRANCH"

          PR_URL=$(gh pr create \
            --title "[Auto] Add request from issue #${ISSUE_ID}" \
            --label "$LABEL" \
            --body "This PR adds a new request submitted in issue #${ISSUE_ID}." \
            --head "$BRANCH" \
            --base main)

          echo "üîç PR created at $PR_URL"
          echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
          echo "üîé Detected issue author: $AUTHOR"
          
          if [ "$AUTHOR" = "blahsadfawerwa3r23rwerwe" ]; then
            echo "‚úÖ Auto-approving PR since author is $AUTHOR"
            gh pr merge "$PR_URL" --merge --delete-branch
            gh pr comment "$PR_URL" --body "‚úÖ Auto-merged since this request was submitted by @$AUTHOR"
          else
            echo "‚ÑπÔ∏è PR created but not auto-approved. Submitted by @$AUTHOR"
          fi