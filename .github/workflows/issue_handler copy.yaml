name: Network Access Issue Handler

on:
  issues:
    types: 
      - opened
      - edited

jobs:
  process_access_request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Parse and validate request yaml
        id: issue_yaml
        run: |
          rm -f /tmp/issue.yaml /tmp/thirdparty_validator.yaml xx*
          # Extract YAML between codefence blocks
          jq -r '.issue.body' "$GITHUB_EVENT_PATH" | awk '/^```yaml/{flag=1; next} /^```/{flag=0} flag' > /tmp/issue.yaml
          jq -r '.issue.body' "$GITHUB_EVENT_PATH" | awk '/^```yaml/{flag=1; next} /^```/{flag=0} flag' > /tmp/thirdparty_validator.yaml

          csplit -z /tmp/issue.yaml '/---/' '{*}'
          FILES=$(ls xx* | tr '\n' ' ')
          echo "split_files=$FILES" >> $GITHUB_OUTPUT

          # Generate policy mappings if existing policy exists
          MAPPING=""
          for FILE in $FILES; do
            SERVICE_TYPE=$(yq '.security_group.serviceType' "$FILE")
            REGION=$(yq '.security_group.region' "$FILE" | tr '[:upper:]' '[:lower:]')
            if [ "$SERVICE_TYPE" = "privatelink-consumer" ]; then
              THIRD_NAME=$(yq '.security_group.thirdpartyName' "$FILE" | tr '[:upper:]' '[:lower:]')
              THIRD_ID=$(yq '.security_group.thirdPartyID' "$FILE")
              SERVICE=$(yq '.security_group.serviceName' "$FILE" | sed -E 's/.*vpce-svc/vpce-svc/' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-')
              FILENAME="${THIRD_NAME}-${THIRD_ID}-${SERVICE}-${REGION}-policy.yaml"
            else
              APPID=$(yq '.security_group.internalAppID' "$FILE" | tr '[:upper:]' '[:lower:]')
              SERVICENAME=$(yq '.security_group.serviceName' "$FILE" | tr '[:upper:]' '[:lower:]')
              FILENAME="${APPID}-${SERVICENAME}-${REGION}-policy.yaml"
            fi
            POLICY_PATH="infrastructure/policies/$FILENAME"
            MAPPING="${MAPPING}${FILE},${POLICY_PATH}|"
            echo "[$FILE] ‚Üí [$FILENAME] ‚Üí exists? $( [ -f "$POLICY_PATH" ] && echo yes || echo no )"
          done
          MAPPING="${MAPPING%|}"
          echo "request_existing_mapping=$MAPPING" >> $GITHUB_OUTPUT

          echo "DEBUG: Mapping string: $MAPPING"
          echo "DEBUG: FILES list: $FILES"
          for f in $FILES; do
            echo "----- $f -----"
            cat $f
          done

      - name: Log request YAML file
        run: |
          echo "=== REQUEST (issue.yaml) ==="
          cat /tmp/issue.yaml

      - name: Log target (existing) file(s) if they exist
        run: |
          MAPPING="${{ steps.issue_yaml.outputs.request_existing_mapping }}"
          IFS='|' read -ra mappings <<< "$MAPPING"
          for map in "${mappings[@]}"; do
            IFS=',' read -r src dest <<< "$map"
            if [ -f "$dest" ]; then
              echo "=== EXISTING ($dest) ==="
              cat "$dest"
            else
              echo "=== EXISTING ($dest) DOES NOT EXIST ==="
            fi
          done

      - name: YAML Validation
        run: |
          pip install --quiet yamllint
          raw_output=$(yamllint --format standard -c .yamllint /tmp/issue.yaml 2>&1 || true)
          yamllint_output=$(echo "$raw_output" | sed 's|/tmp/issue.yaml:|line |')
          if [ -n "$yamllint_output" ]; then
            {
              echo "### ‚ö†Ô∏è yamllint found issues in your submitted YAML"
              echo '```yaml'
              echo "$yamllint_output"
              echo '```'
            } > /tmp/yamllint_output.txt
            echo "yamllint_error=true" >> $GITHUB_OUTPUT
            cat /tmp/yamllint_output.txt
          else
            echo "yamllint_error=false" >> $GITHUB_OUTPUT
          fi

      - name: Duplicate Validation
        uses: drewpypro/drewpy-actions/yaml-duplicate-validator@v1
        id: duplicate_validation
        with:
          created_yaml: ${{ steps.issue_yaml.outputs.split_files }}
          request_existing_mapping: ${{ steps.issue_yaml.outputs.request_existing_mapping }}

      - name: Log duplicate validator output
        run: |
          echo "=== DUPLICATE VALIDATION OUTPUT ==="
          cat dupe_output.txt || echo "(No dupe_output.txt produced)"

      - name: Comment on issue if dupes are found
        if: ${{ steps.duplicate_validation.outputs.duplicates_detected == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --body-file dupe_output.txt
          echo "Duplicate(s) found, failing pipeline."
          exit 1

      - name: Third-Party Validation
        id: thirdparty_validation
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
        run: |
          pip install --quiet PyYAML
          chmod +x ./scripts/validate_thirdparty.py
          echo "üîç Validating third-party contract and risk..."
          python3 ./scripts/validate_thirdparty.py /tmp/thirdparty_validator.yaml ./thirdpartyDB.json > /tmp/thirdparty_validation.txt 2>&1 || (
            echo '### ‚ùå Third-party validation failed' > /tmp/comment.txt
            cat /tmp/thirdparty_validation.txt >> /tmp/comment.txt
            ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
            gh issue comment "$ISSUE_NUMBER" --body-file /tmp/comment.txt
            exit 1
          )
          echo "=== THIRD-PARTY VALIDATION OUTPUT ==="
          cat /tmp/thirdparty_validation.txt

      - name: Commit Changes and Create/Update PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          sudo wget -O /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          yq --version

          ISSUE_ID=${{ github.event.issue.number }}
          BRANCH="issue-${ISSUE_ID}"
          LABEL=$(jq -r '.issue.labels[0].name' "$GITHUB_EVENT_PATH")
          AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Always use the same branch, overwrite it
          git checkout -B "$BRANCH" origin/main || git checkout -b "$BRANCH"

          MAPPING="${{ steps.issue_yaml.outputs.request_existing_mapping }}"
          IFS='|' read -ra mappings <<< "$MAPPING"
          for map in "${mappings[@]}"; do
            IFS=',' read -r src dest <<< "$map"
            if [ -f "$dest" ]; then
              yq -i '.rules += (load("'"$src"'").rules // [])' "$dest"
            else
              cp "$src" "$dest"
            fi
            git add "$dest"
            echo "=== UPDATED POLICY FILE: $dest ==="
            cat "$dest"
          done

          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Add network access policies from issue #${ISSUE_ID}"
            git push -f origin "$BRANCH"

            # Find existing PR or create a new one
            PR_URL=$(gh pr list --state open --head "$BRANCH" --json url --jq '.[0].url')
            if [ -z "$PR_URL" ]; then
              PR_URL=$(gh pr create \
                --title "[Auto] Add network access policies from issue #${ISSUE_ID}" \
                --label "$LABEL" \
                --body "This PR adds multiple network access policies from issue #${ISSUE_ID}." \
                --head "$BRANCH" \
                --base main)
              echo "üîç PR created at $PR_URL"
            else
              echo "üîç Updated existing PR: $PR_URL"
            fi

            echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
            echo "üîé Detected issue author: $AUTHOR"
            
            if [ "$AUTHOR" = "blahsadfawerwa3r23rwerwe" ]; then
              echo "‚úÖ Auto-approving PR since author is $AUTHOR"
              gh pr merge "$PR_URL" --merge --delete-branch
              gh pr comment "$PR_URL" --body "‚úÖ Auto-merged since this request was submitted by @$AUTHOR"
            else
              echo "‚ÑπÔ∏è PR created but not auto-approved. Submitted by @$AUTHOR"
            fi
          else
            echo "No changes to commit"
          fi
