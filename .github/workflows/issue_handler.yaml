name: Network Access Issue Handler

on:
  issues:
    types: 
      - opened
      - edited

jobs:
  process_access_request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Parse and validate request yaml
        id: issue_yaml
        run: |
          # Extract YAML between codefence blocks
          jq -r '.issue.body' "$GITHUB_EVENT_PATH" | awk '/^```yaml/{flag=1; next} /^```/{flag=0} flag' > /tmp/issue.yaml
          csplit -z /tmp/issue.yaml '/---/' '{*}'
          FILES=$(ls xx* | tr '\n' ' ')
          echo "split_files=$FILES" >> $GITHUB_OUTPUT

          # 2. Generate policy mappings if existing policy exists
          MAPPING=""
          for FILE in $FILES; do
            SERVICE_TYPE=$(yq '.security_group.serviceType' "$FILE")
            REGION=$(yq '.security_group.region' "$FILE" | tr '[:upper:]' '[:lower:]')
            if [ "$SERVICE_TYPE" = "privatelink-consumer" ]; then
              THIRD_NAME=$(yq '.security_group.thirdpartyName' "$FILE" | tr '[:upper:]' '[:lower:]')
              THIRD_ID=$(yq '.security_group.thirdPartyID' "$FILE")
              SERVICE=$(yq '.security_group.serviceName' "$FILE" | sed 's/com\.amazonaws\.vpce\.//' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-')
              FILENAME="${THIRD_NAME}-${THIRD_ID}-${SERVICE}-${REGION}-policy.yaml"
            else
              APPID=$(yq '.security_group.internalAppID' "$FILE" | tr '[:upper:]' '[:lower:]')
              SERVICENAME=$(yq '.security_group.serviceName' "$FILE" | tr '[:upper:]' '[:lower:]')
              FILENAME="${APPID}-${SERVICENAME}-${REGION}-policy.yaml"
            fi

            POLICY_PATH="infrastructure/policies/$FILENAME"   # <--- ADD THIS LINE!

            MAPPING="${MAPPING}${FILE},${POLICY_PATH}|"
            echo "[$FILE] ‚Üí [$FILENAME] ‚Üí exists? $( [ -f "$POLICY_PATH" ] && echo yes || echo no )"
          done

          MAPPING="${MAPPING%|}"
          echo "request_existing_mapping=$MAPPING" >> $GITHUB_OUTPUT
          
      - name: Set Issue YAML Outputs
        id: yaml_outputs
        if: "contains(github.event.issue.labels.*.name, 'skip-form-processing')"
        run: |
          # Determine request type from labels
          if [ "$(grep -c 'privatelink-consumer' <<< "${{ join(github.event.issue.labels.*.name, '\n') }}")" -gt 0 ]; then
            echo "request_type=consumer" >> $GITHUB_OUTPUT
            echo "schema_file=privatelink-consumer-schema.json" >> $GITHUB_OUTPUT
          elif [ "$(grep -c 'privatelink-provider' <<< "${{ join(github.event.issue.labels.*.name, '\n') }}")" -gt 0 ]; then
            echo "request_type=provider" >> $GITHUB_OUTPUT
            echo "schema_file=privatelink-provider-schema.json" >> $GITHUB_OUTPUT
          fi
          
          # Set other issue details
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            

      - name: YAML Validation
        run: |
          pip install --quiet yamllint
          raw_output=$(yamllint --format standard -c .yamllint /tmp/issue.yaml 2>&1 || true)
          yamllint_output=$(echo "$raw_output" | sed 's|/tmp/issue.yaml:|line |')
          
          if [ -n "$yamllint_output" ]; then
            {
              echo "### ‚ö†Ô∏è yamllint found issues in your submitted YAML"
              echo '```yaml'
              echo "$yamllint_output"
              echo '```'
            } > /tmp/yamllint_output.txt
            
            echo "yamllint_error=true" >> $GITHUB_OUTPUT
            cat /tmp/yamllint_output.txt
          else
            echo "yamllint_error=false" >> $GITHUB_OUTPUT
          fi

      - name: Third-Party Validation
        id: thirdparty_validation
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
        run: |
          pip install --quiet PyYAML
          chmod +x ./scripts/validate_thirdparty.py

          echo "üîç Validating third-party contract and risk..."

          echo "---- xx00 contents ----"
          cat xx00
          echo "----------------------"
          
          FILES=$(ls xx*)
          status=0

          for FILE in $FILES; do
            if ! python3 ./scripts/validate_thirdparty.py "$FILE" ./thirdpartyDB.json > /tmp/thirdparty_validation.txt 2>&1; then
              echo "Third-party validation failed for $FILE. Posting result to GitHub Issue."
              echo '### ‚ùå Third-party validation failed' > /tmp/comment.txt
              echo "**File:** $FILE" >> /tmp/comment.txt
              cat /tmp/thirdparty_validation.txt >> /tmp/comment.txt
              ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
              gh issue comment "$ISSUE_NUMBER" --body-file /tmp/comment.txt
              status=1
            fi
          done

          if [ $status -ne 0 ]; then
            exit 1
          else
            echo "‚úÖ Third-party validation passed for all files."
          fi

      - name: Duplicate Validation
        uses: drewpypro/drewpy-actions/yaml-duplicate-validator@v1.0.6
        id: duplicate_validation
        with:
          created_yaml: ${{ steps.issue_yaml.outputs.split_files }}
          request_existing_mapping: ${{ steps.issue_yaml.outputs.request_existing_mapping }}

      - name: Comment on issue if dupes are found
        if: ${{ steps.duplicate_validation.outputs.duplicates_detected == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -lt 
          cat dupe_output.txt
          gh issue comment ${{ github.event.issue.number }} --body-file dupe_output.txt

      - name: AI Review
        env:
          DREWPYAI_API_KEY: ${{ secrets.DREWPYAI_API_KEY }}
          DREWPY_PAT: ${{ secrets.DREWPY_PAT }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ü§ñ Cloning AI reviewer..."
          git clone https://x-access-token:${{ secrets.DREWPY_PAT }}@github.com/drewpypro/drewpy-ai-actions.git
          pip install -r drewpy-ai-actions/aws-netsec-automation-review/requirements.txt

          echo "üìä Running AI rule reviewer..."
          python3 drewpy-ai-actions/aws-netsec-automation-review/ai-rule-review.py \
            --input-file /tmp/issue.yaml \
            --output-file /tmp/ai_review_output.md || true

          echo "üìù Posting AI review result..."
          ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          gh issue comment "$ISSUE_NUMBER" --body-file /tmp/ai_review_output.md

      # Commit Changes and Create PR (Always Runs)
      - name: Commit Changes and Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          ISSUE_ID=${{ github.event.issue.number }}
          BRANCH="issue-${ISSUE_ID}"
          LABEL=$(jq -r '.issue.labels[0].name' "$GITHUB_EVENT_PATH")
          AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Check if branch already exists
          if git ls-remote --heads origin | grep -q "refs/heads/$BRANCH"; then
            # Branch exists, create a unique branch name
            BRANCH="issue-${ISSUE_ID}-$(date +%s)"
          fi

          # Create and switch to the branch
          git checkout -b "$BRANCH"

          # Copy validated files to infra/policies and add
          MAPPING="${{ steps.issue_yaml.outputs.request_existing_mapping }}"
          IFS='|' read -ra mappings <<< "$MAPPING"
          for map in "${mappings[@]}"; do
            IFS=',' read -r src dest <<< "$map"
            cp "$src" "$dest"
            git add "$dest"
          done

          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Add network access policies from issue #${ISSUE_ID}"
            
            # Force push or push with lease to handle potential conflicts
            git push -f origin "$BRANCH"

            PR_URL=$(gh pr create \
              --title "[Auto] Add network access policies from issue #${ISSUE_ID}" \
              --label "$LABEL" \
              --body "This PR adds multiple network access policies from issue #${ISSUE_ID}." \
              --head "$BRANCH" \
              --base main)

            echo "üîç PR created at $PR_URL"
            echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
            echo "üîé Detected issue author: $AUTHOR"
            
            if [ "$AUTHOR" = "blahsadfawerwa3r23rwerwe" ]; then
              echo "‚úÖ Auto-approving PR since author is $AUTHOR"
              gh pr merge "$PR_URL" --merge --delete-branch
              gh pr comment "$PR_URL" --body "‚úÖ Auto-merged since this request was submitted by @$AUTHOR"
            else
              echo "‚ÑπÔ∏è PR created but not auto-approved. Submitted by @$AUTHOR"
            fi
          else
            echo "No changes to commit"
          fi