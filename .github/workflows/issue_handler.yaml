name: Issue Workflow

on:
  issues:
    types: [opened]

jobs:
  validate_issue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Collect and set issues_vars
        id: issues_vars
        run: |
          ISSUE_BODY=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")
          
          REGION=$(echo "$ISSUE_BODY" | grep -E '^\s*region:' | head -n1 | sed -E 's/.*region:[[:space:]]*"?([^"]+)"?/\1/')
          if [ -z "$REGION" ]; then
            echo "‚ùå Region not found in issue. Failing."
            exit 1
          fi
          echo "region=$REGION" >> "$GITHUB_OUTPUT"

          AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")
          echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
          echo "üîé Detected issue author: $AUTHOR"

          LABELS=$(jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH")
          if echo "$LABELS" | grep -q 'sg-request'; then
            echo "file_type=sgs" >> "$GITHUB_OUTPUT"
          elif echo "$LABELS" | grep -q 'access-request'; then
            echo "file_type=rules" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå No recognized label found on issue. Exiting."
            exit 1
          fi

      - name: Lint and schema validate
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          pip install --quiet yamllint PyYAML jsonschema

          jq -r '.issue.body' "$GITHUB_EVENT_PATH" \
            | sed -n '/```yaml/,/```/p' \
            | sed '/^```/d' \
            > /tmp/issue.yaml

          raw_output=$(yamllint --format standard -c .yamllint /tmp/issue.yaml 2>&1 || true)

          echo "::group::üß™ /tmp/issue.yaml visible chars"
          cat -A /tmp/issue.yaml || echo "File missing or empty"
          echo "::endgroup::"

          # Strip the path and format to be cleaner
          yamllint_output=$(echo "$raw_output" | sed 's|/tmp/issue.yaml:|line |')

          if [ -n "$yamllint_output" ]; then
            {
              echo "### ‚ö†Ô∏è yamllint found issues in your submitted YAML"
              echo '```yaml'
              echo "$yamllint_output"
              echo '```'
            } > /tmp/lint_comment.txt
          else
            echo "### ‚úÖ yamllint passed" > /tmp/lint_comment.txt
            echo "" >> /tmp/lint_comment.txt
            echo "No linting issues found in your YAML." >> /tmp/lint_comment.txt
          fi

          if [ "${{ steps.issues_vars.outputs.file_type }}" = "sgs" ]; then
            SCHEMA=".github/schemas/sg-request-schema.json"
          else
            SCHEMA=".github/schemas/access-request-schema.json"
          fi

          set +e
          python3 scripts/validate_schema.py /tmp/issue.yaml "$SCHEMA" > /tmp/schema_output.txt 2>&1
          exit_code=$?
          set -e

          if [ $exit_code -ne 0 ]; then
            {
              echo "### ‚ùå Schema validation failed"
              echo ""
              echo '```txt'
              cat /tmp/schema_output.txt
              echo '```'
            } >> /tmp/lint_comment.txt
            gh issue comment "${{ github.event.issue.number }}" --body-file /tmp/lint_comment.txt
            exit 1
          else
            echo "### ‚úÖ Schema validation passed" >> /tmp/lint_comment.txt
            echo "No schema issues found in your YAML." >> /tmp/lint_comment.txt
            gh issue comment "${{ github.event.issue.number }}" --body-file /tmp/lint_comment.txt
          fi

      - name: Append request to correct file
        run: |
          FILE="infrastructure/policies/${{ steps.issues_vars.outputs.region }}/${{ steps.issues_vars.outputs.file_type }}.yaml"
          ISSUE_BODY=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")
          ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")

          if [ ! -f "$FILE" ]; then
            echo "‚ùå ERROR: Expected file '$FILE' not found for region '${{ steps.issues_vars.outputs.region }}'."
            echo "This may be due to unsupported region or cross-region mismatch. Exiting."
            exit 1
          fi

          # Remove template headers like '### SG Request YAML' or '### Access Rule YAML'
          CLEANED_BODY=$(echo "$ISSUE_BODY" | sed -n '/```yaml/,/```/p' | sed '/^```/d')

          # Ensure file ends with newline
          tail -c1 "$FILE" | read -r _ || echo >> "$FILE"

          {
            echo ""
            echo "  # From issue #${ISSUE_NUMBER}"
            echo "$CLEANED_BODY" | sed 's/^/  /'
          } >> "$FILE"


      - name: Commit Changes and Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          ISSUE_ID=${{ github.event.issue.number }}
          BRANCH="issue-${ISSUE_ID}"
          FILE="infrastructure/policies/${{ steps.issues_vars.outputs.region }}/${{ steps.issues_vars.outputs.file_type }}.yaml"
          LABEL=$(jq -r '.issue.labels[0].name' "$GITHUB_EVENT_PATH")
          AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git checkout -b "$BRANCH"
          git add "${{ steps.issues_vars.outputs.target_file }}"
          git commit -m "Append request from issue #${ISSUE_ID}"
          git push origin "$BRANCH"

          PR_URL=$(gh pr create \
            --title "[Auto] Add request from issue #${ISSUE_ID}" \
            --label "$LABEL" \
            --body "This PR adds a new request submitted in issue #${ISSUE_ID}." \
            --head "$BRANCH" \
            --base main \
            --json url -q .url)

          echo "üîç PR created at $PR_URL"
          echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
          echo "üîé Detected issue author: $AUTHOR"
          
          if [ "$AUTHOR" = "drewpypro" ]; then
            echo "‚úÖ Auto-approving PR since author is $AUTHOR"
            gh pr review --approve "$PR_URL"
            gh pr comment "$PR_URL" --body "‚úÖ Auto-approved since this request was submitted by @$AUTHOR"
          else
            echo "‚ÑπÔ∏è PR created but not auto-approved. Submitted by @$AUTHOR"
          fi

          