name: Network Access Issue Handler

on:
  issues:
    types: [opened]

jobs:
  process_access_request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --quiet yamllint PyYAML jsonschema

      - name: Process Issue Form
        id: issue_data
        run: |
          # Make script executable
          chmod +x scripts/form_to_yaml.py

          # Run the script to process the form data
          DATA=$(scripts/form_to_yaml.py)
          
          # Extract and set outputs
          REQUEST_TYPE=$(echo "$DATA" | grep "request_type=" | cut -d= -f2)
          echo "request_type=$REQUEST_TYPE" >> $GITHUB_OUTPUT
          
          # Extract region from the generated YAML
          REGION=$(grep -o 'region: [a-z0-9-]*' /tmp/issue.yaml | head -1 | cut -d ' ' -f 2)
          echo "region=$REGION" >> $GITHUB_OUTPUT
          
          # Set schema file
          if [ "$REQUEST_TYPE" = "consumer" ]; then
            echo "schema_file=.github/schemas/privatelink-consumer-schema.json" >> $GITHUB_OUTPUT
          elif [ "$REQUEST_TYPE" = "provider" ]; then
            echo "schema_file=.github/schemas/privatelink-provider-schema.json" >> $GITHUB_OUTPUT
          fi
          
          # Set other outputs
          ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          ISSUE_AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")
          ISSUE_TITLE=$(jq -r '.issue.title' "$GITHUB_EVENT_PATH")
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_author=$ISSUE_AUTHOR" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          # Display generated YAML for debugging
          echo "Generated YAML content:"
          cat /tmp/issue.yaml

      - name: YAML Validation
        id: yaml_validation
        run: |
          yamllint --format standard -c .yamllint /tmp/issue.yaml > /tmp/yamllint_output.txt || true
          
          if [ -s /tmp/yamllint_output.txt ]; then
            echo "yamllint_error=true" >> $GITHUB_OUTPUT
            cat /tmp/yamllint_output.txt
          else
            echo "yamllint_error=false" >> $GITHUB_OUTPUT
            echo "YAML format validation passed"
          fi

      - name: Schema Validation
        id: schema_validation
        run: |
          if [ "${{ steps.issue_data.outputs.request_type }}" != "unknown" ]; then
            python3 scripts/validate_schema.py /tmp/issue.yaml "${{ steps.issue_data.outputs.schema_file }}" > /tmp/schema_output.txt 2>&1 || echo "schema_error=true" >> $GITHUB_OUTPUT
            
            if [ -s /tmp/schema_output.txt ]; then
              cat /tmp/schema_output.txt
              if grep -q "❌" /tmp/schema_output.txt; then
                echo "schema_error=true" >> $GITHUB_OUTPUT
              else
                echo "schema_error=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "schema_error=false" >> $GITHUB_OUTPUT
              echo "Schema validation passed"
            fi
          else
            # Try both schemas
            CONSUMER_RESULT=$(python3 scripts/validate_schema.py /tmp/issue.yaml .github/schemas/privatelink-consumer-schema.json 2>&1 || echo "Failed")
            PROVIDER_RESULT=$(python3 scripts/validate_schema.py /tmp/issue.yaml .github/schemas/privatelink-provider-schema.json 2>&1 || echo "Failed")
            
            if echo "$CONSUMER_RESULT" | grep -q "✅"; then
              echo "schema_file=.github/schemas/privatelink-consumer-schema.json" >> $GITHUB_OUTPUT
              echo "schema_error=false" >> $GITHUB_OUTPUT
              echo "Schema validation passed (consumer schema)"
            elif echo "$PROVIDER_RESULT" | grep -q "✅"; then
              echo "schema_file=.github/schemas/privatelink-provider-schema.json" >> $GITHUB_OUTPUT
              echo "schema_error=false" >> $GITHUB_OUTPUT
              echo "Schema validation passed (provider schema)"
            else
              echo "schema_error=true" >> $GITHUB_OUTPUT
              echo "Failed to validate against any schema:"
              echo "$CONSUMER_RESULT"
              echo "$PROVIDER_RESULT"
            fi
          fi

      - name: Create validation comment
        if: steps.yaml_validation.outputs.yamllint_error == 'true' || steps.schema_validation.outputs.schema_error == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          {
            echo "### ⚠️ Validation Results"
            echo ""
            
            if [ "${{ steps.yaml_validation.outputs.yamllint_error }}" == "true" ]; then
              echo "#### YAML Formatting Issues:"
              echo '```yaml'
              cat /tmp/yamllint_output.txt
              echo '```'
              echo ""
            else
              echo "#### ✅ YAML Format Validation: Passed"
              echo ""
            fi
            
            if [ "${{ steps.schema_validation.outputs.schema_error }}" == "true" ]; then
              echo "#### Schema Validation Issues:"
              echo '```'
              cat /tmp/schema_output.txt
              echo '```'
            else
              echo "#### ✅ Schema Validation: Passed"
            fi
          } > /tmp/validation_comment.txt
          
          gh issue comment "${{ steps.issue_data.outputs.issue_number }}" --body-file /tmp/validation_comment.txt
          
          if [ "${{ steps.yaml_validation.outputs.yamllint_error }}" == "true" ] || [ "${{ steps.schema_validation.outputs.schema_error }}" == "true" ]; then
            echo "Validation errors found. Exiting workflow."
            exit 1
          fi

      - name: Generate policy file
        id: policy_file
        run: |
          REGION="${{ steps.issue_data.outputs.region }}"
          REQUEST_TYPE="${{ steps.issue_data.outputs.request_type }}"
          
          # Make sure the policies directory exists
          mkdir -p infrastructure/policies
          
          # Read the YAML content
          YAML_CONTENT=$(cat /tmp/issue.yaml)
          
          if [ "$REQUEST_TYPE" = "consumer" ] || [ "$REQUEST_TYPE" = "provider" ]; then
            # Extract key information for filename
            if [ "$REQUEST_TYPE" = "consumer" ]; then
              THIRD_PARTY_ID=$(echo "$YAML_CONTENT" | grep -o 'thirdPartyID: [a-zA-Z0-9]*' | head -1 | cut -d ' ' -f 2)
              THIRD_PARTY_NAME=$(echo "$YAML_CONTENT" | grep -o 'thirdpartyName: [a-zA-Z0-9]*' | head -1 | cut -d ' ' -f 2)
              SERVICE_NAME=$(echo "$YAML_CONTENT" | grep -o 'serviceName: [^ ]*' | head -1 | cut -d ' ' -f 2 | tr -d '"')
              SERVICE_NAME_SHORT=$(echo "$SERVICE_NAME" | sed 's/com\.amazonaws\.vpce\.[^.]*\.//' | cut -d '.' -f 1)
              
              FILENAME="${THIRD_PARTY_NAME,,}-${THIRD_PARTY_ID}-${REGION}-policy.yaml"
            else
              APP_ID=$(echo "$YAML_CONTENT" | grep -o 'internalAppID: [a-zA-Z0-9-]*' | head -1 | cut -d ' ' -f 2)
              SERVICE_NAME=$(echo "$YAML_CONTENT" | grep -o 'serviceName: [^ ]*' | head -1 | cut -d ' ' -f 2 | tr -d '"')
              
              FILENAME="provider-${APP_ID}-${REGION}-policy.yaml"
            fi
            
            # Create the policy file
            echo "$YAML_CONTENT" > "infrastructure/policies/${FILENAME}"
            echo "policy_file=infrastructure/policies/${FILENAME}" >> $GITHUB_OUTPUT
            echo "Created policy file: ${FILENAME}"
          else
            # For access rules, we need to find the existing policy file and append
            # This logic would need to be expanded based on your specific needs
            echo "Access rule handling not implemented yet"
            exit 1
          fi

      - name: Create Pull Request
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ steps.issue_data.outputs.issue_number }}"
          BRANCH="issue-${ISSUE_NUMBER}"
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          git checkout -b "$BRANCH"
          git add infrastructure/policies/
          git commit -m "Add network access policy from issue #${ISSUE_NUMBER}"
          
          # Push the branch
          git push origin "$BRANCH"
          
          # Create PR
          PR_URL=$(gh pr create \
            --title "Add network access policy from issue #${ISSUE_NUMBER}" \
            --body "This PR adds the network access policy requested in issue #${ISSUE_NUMBER}." \
            --base main \
            --head "$BRANCH")
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          
          # Comment on the issue
          {
            echo "### ✅ Request Processed Successfully"
            echo ""
            echo "Your request has been processed and a pull request has been created:"
            echo "- [View Pull Request](${PR_URL})"
            echo ""
            echo "The policy file will be deployed once the PR is approved and merged."
          } > /tmp/success_comment.txt
          
          gh issue comment "${{ steps.issue_data.outputs.issue_number }}" --body-file /tmp/success_comment.txt

      - name: Upload policy file for terraform workflow
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: policy-file
          path: ${{ steps.policy_file.outputs.policy_file }}