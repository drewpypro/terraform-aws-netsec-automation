name: Network Access Issue Handler

on:
  issues:
    types: 
      - opened
      - edited

jobs:
  process_access_request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Process Issue YAML
        id: issue_yaml
        if: "contains(github.event.issue.labels.*.name, 'skip-form-processing')"
        run: |
          # Ensure policies directory exists
          mkdir -p infrastructure/policies
          
          # Extract YAML from issue body
          jq -r '.issue.body' "$GITHUB_EVENT_PATH" \
            | sed '/^```yaml/,/^```/d' \
            > /tmp/issue.yaml
          
          # Split YAML documents at the '---' markers
          echo "Splitting YAML documents..."
          csplit -z /tmp/issue.yaml '/---/' '{*}'
          
          # Initialize tracking variables
          FILENAMES=()
          REGIONS=()
          
          # Process each document
          for file in xx*; do
            # Extract key fields from document
            REGION=$(grep -o 'region: [a-z0-9-]*' "$file" | head -1 | cut -d ' ' -f 2)
            THIRD_PARTY_NAME=$(grep -m 1 'thirdpartyName:' "$file" | awk '{print $2}' | tr '[:upper:]' '[:lower:]' | tr -d '\n')
            THIRD_PARTY_ID=$(grep -m 1 'thirdPartyID:' "$file" | awk '{print $2}' | tr -d '\n')
       
            echo "Found region: $REGION, thirdpartyName: $THIRD_PARTY_NAME, thirdPartyID: $THIRD_PARTY_ID"
            
            # Fallback to safe naming if extraction fails
            if [ -z "$THIRD_PARTY_NAME" ] || [ -z "$THIRD_PARTY_ID" ]; then
              echo "Warning: Missing required fields, using default values"
              THIRD_PARTY_NAME="unknown"
              THIRD_PARTY_ID="policy"
            fi
            
            FILENAME="${THIRD_PARTY_NAME}-${THIRD_PARTY_ID}-${REGION}-policy.yaml"
            FILE="infrastructure/policies/${FILENAME}"

            # Copy the specific document to its file
            # Use sed to remove any extra document separators
            sed '/^---$/d' "$file" > "$FILE"
                        
            # Store filename and region
            FILENAMES+=("$FILENAME")
            REGIONS+=("$REGION")
          done
          
          # Clean up temporary files
          rm xx*
          
          # Debug: Check how many filenames we have
          echo "Number of policy files created: ${#FILENAMES[@]}"
          
          # Output first filename and region for workflow compatibility (if any were created)
          if [ ${#FILENAMES[@]} -gt 0 ]; then
            echo "filename=${FILENAMES[0]}" >> "$GITHUB_OUTPUT"
            echo "region=${REGIONS[0]}" >> "$GITHUB_OUTPUT"
            
            # Save all filenames for later steps if needed
            printf '%s\n' "${FILENAMES[@]}" > /tmp/policy_filenames.txt
            printf '%s\n' "${REGIONS[@]}" > /tmp/policy_regions.txt
          else
            echo "No policy files were created!"
          fi

          # Debug: Show created files
          echo "Created policy files:"
          ls -l infrastructure/policies/

      - name: Process Issue Form
        id: issue_data
        if: "!contains(github.event.issue.labels.*.name, 'skip-form-processing')"
        run: |
          pip install --quiet yamllint PyYAML jsonschema

          # Make scripts executable
          chmod +x ./scripts/form_to_yaml.py ./scripts/validate_schema.py

          # Run the script to process the form data
          set -x  # Enable verbose output
          python3 ./scripts/form_to_yaml.py || {
            echo "Script failed. Checking debug log..."
            cat /tmp/form_to_yaml_debug.log
            exit 1
          }
          
          # Extract YAML from the temporary file
          echo "Processing YAML from form submission"
          cat /tmp/issue.yaml
          
          # Create policy file
          mkdir -p infrastructure/policies
          
          # Extract relevant fields from the YAML to generate the filename
          REGION=$(grep 'region:' /tmp/issue.yaml | head -1 | awk '{print $2}' | tr -d '\n')
          
          if grep -q 'thirdpartyName:' /tmp/issue.yaml; then
            # Consumer policy
            THIRD_PARTY_NAME=$(grep 'thirdpartyName:' /tmp/issue.yaml | awk '{print $2}' | tr '[:upper:]' '[:lower:]' | tr -d '\n')
            THIRD_PARTY_ID=$(grep 'thirdPartyID:' /tmp/issue.yaml | awk '{print $2}' | tr -d '\n')
            FILENAME="${THIRD_PARTY_NAME}-${THIRD_PARTY_ID}-${REGION}-policy.yaml"
          else
            # Provider policy
            INTERNAL_APP_ID=$(grep 'internalAppID:' /tmp/issue.yaml | awk '{print $2}' | tr '[:upper:]' '[:lower:]' | tr -d '\n')
            SERVICE_NAME=$(grep 'serviceName:' /tmp/issue.yaml | awk '{print $2}' | tr '[:upper:]' '[:lower:]' | tr -d '\n')
            FILENAME="${INTERNAL_APP_ID}-${SERVICE_NAME}-${REGION}-policy.yaml"
          fi
          
          # Use safe defaults if extraction fails
          if [ -z "$FILENAME" ]; then
            FILENAME="unknown-policy-${REGION}.yaml"
          fi
          
          FILE="infrastructure/policies/${FILENAME}"
          
          # Copy the generated YAML to the policy file
          cp /tmp/issue.yaml "$FILE"
          
          # Save filename and region for later steps
          echo "$FILENAME" > /tmp/policy_filenames.txt
          echo "$REGION" > /tmp/policy_regions.txt
          
          # Output variables for next steps
          echo "filename=$FILENAME" >> "$GITHUB_OUTPUT"
          echo "region=$REGION" >> "$GITHUB_OUTPUT"
          
          # Debug: Show created files
          echo "Created policy file:"
          ls -l infrastructure/policies/


      - name: Set Issue YAML Outputs
        id: yaml_outputs
        if: "contains(github.event.issue.labels.*.name, 'skip-form-processing')"
        run: |
          # Determine request type from labels
          if [ "$(grep -c 'privatelink-consumer' <<< "${{ join(github.event.issue.labels.*.name, '\n') }}")" -gt 0 ]; then
            echo "request_type=consumer" >> $GITHUB_OUTPUT
            echo "schema_file=privatelink-consumer-schema.json" >> $GITHUB_OUTPUT
          elif [ "$(grep -c 'privatelink-provider' <<< "${{ join(github.event.issue.labels.*.name, '\n') }}")" -gt 0 ]; then
            echo "request_type=provider" >> $GITHUB_OUTPUT
            echo "schema_file=privatelink-provider-schema.json" >> $GITHUB_OUTPUT
          fi
          
          # Set other issue details
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "issue_author=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
            

      - name: YAML Validation
        run: |
          pip install --quiet yamllint
          raw_output=$(yamllint --format standard -c .yamllint /tmp/issue.yaml 2>&1 || true)
          yamllint_output=$(echo "$raw_output" | sed 's|/tmp/issue.yaml:|line |')
          
          if [ -n "$yamllint_output" ]; then
            {
              echo "### ‚ö†Ô∏è yamllint found issues in your submitted YAML"
              echo '```yaml'
              echo "$yamllint_output"
              echo '```'
            } > /tmp/yamllint_output.txt
            
            echo "yamllint_error=true" >> $GITHUB_OUTPUT
            cat /tmp/yamllint_output.txt
          else
            echo "yamllint_error=false" >> $GITHUB_OUTPUT
          fi

      - name: Third-Party Validation
        id: thirdparty_validation
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install --quiet PyYAML
          chmod +x ./scripts/validate_thirdparty.py

          echo "üîç Validating third-party contract and risk..."

          if ! python3 ./scripts/validate_thirdparty.py /tmp/issue.yaml ./thirdpartyDB.json > /tmp/thirdparty_validation.txt 2>&1; then
            echo "Third-party validation failed. Posting result to GitHub Issue."

            echo '### ‚ùå Third-party validation failed' > /tmp/comment.txt
            cat /tmp/thirdparty_validation.txt >> /tmp/comment.txt  # ‚úÖ no wrapping backticks here

            ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
            gh issue comment "$ISSUE_NUMBER" --body-file /tmp/comment.txt

            exit 1
          else
            echo "‚úÖ Third-party validation passed."
          fi

      - name: AI Review
        env:
          DREWPYAI_API_KEY: ${{ secrets.DREWPYAI_API_KEY }}
          PAT_GITHUB_ACTIONS: ${{ secrets.PAT_GITHUB_ACTIONS }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "ü§ñ Cloning AI reviewer..."
          git clone https://x-access-token:${{ secrets.PAT_GITHUB_ACTIONS }}@github.com/drewpypro/drewpy-ai-actions.git
          pip install -r drewpy-ai-actions/aws-netsec-automation-review/requirements.txt

          echo "üìä Running AI rule reviewer..."
          python3 drewpy-ai-actions/aws-netsec-automation-review/ai-rule-review.py \
            --input-file /tmp/issue.yaml \
            --output-file /tmp/ai_review_output.md

          echo "üìù Posting AI review result..."
          ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          gh issue comment "$ISSUE_NUMBER" --body-file /tmp/ai_review_output.md

      # Commit Changes and Create PR (Always Runs)
      - name: Commit Changes and Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          ISSUE_ID=${{ github.event.issue.number }}
          BRANCH="issue-${ISSUE_ID}"
          LABEL=$(jq -r '.issue.labels[0].name' "$GITHUB_EVENT_PATH")
          AUTHOR=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Check if branch already exists
          if git ls-remote --heads origin | grep -q "refs/heads/$BRANCH"; then
            # Branch exists, create a unique branch name
            BRANCH="issue-${ISSUE_ID}-$(date +%s)"
          fi

          # Create and switch to the branch
          git checkout -b "$BRANCH"

          # Add all policy files from the filenames file (which is always created)
          while IFS= read -r FILENAME; do
            if [ -n "$FILENAME" ]; then
              FILE="infrastructure/policies/${FILENAME}"
              git add "$FILE"
            fi
          done < /tmp/policy_filenames.txt

          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Add network access policies from issue #${ISSUE_ID}"
            
            # Force push or push with lease to handle potential conflicts
            git push -f origin "$BRANCH"

            PR_URL=$(gh pr create \
              --title "[Auto] Add network access policies from issue #${ISSUE_ID}" \
              --label "$LABEL" \
              --body "This PR adds multiple network access policies from issue #${ISSUE_ID}." \
              --head "$BRANCH" \
              --base main)

            echo "üîç PR created at $PR_URL"
            echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
            echo "üîé Detected issue author: $AUTHOR"
            
            if [ "$AUTHOR" = "blahsadfawerwa3r23rwerwe" ]; then
              echo "‚úÖ Auto-approving PR since author is $AUTHOR"
              gh pr merge "$PR_URL" --merge --delete-branch
              gh pr comment "$PR_URL" --body "‚úÖ Auto-merged since this request was submitted by @$AUTHOR"
            else
              echo "‚ÑπÔ∏è PR created but not auto-approved. Submitted by @$AUTHOR"
            fi
          else
            echo "No changes to commit"
          fi